name: Dev Build

on:
  issue_comment:
    types: [created]

jobs:
  dev-build:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.add-version.outputs.version }}

    steps:
      - name: Detect deploy comment
        uses: khan/pull-request-comment-trigger@master
        id: check-comment
        with:
          trigger: '#deploy-me'
          reaction: rocket
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract branch name
        uses: xt0rted/pull-request-comment-branch@v1
        id: comment-branch
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
        # Added by khan/pull-request-comment-trigger
        if: steps.check-comment.outputs.triggered == 'true'

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ steps.comment-branch.outputs.head_ref }}

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: yarn

      # TODO:
      # build and publish
      - name: Install dependencies
        shell: bash
        run: yarn install --immutable

      - name: Build
        run: yarn build:prod

      - name: Setup access to qlik npm registry
        shell: bash
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> ~/.npmrc
          echo "//npm.pkg.github.com/:always-auth=true" >> ~/.npmrc
          echo "@qlik-oss:registry=https://npm.pkg.github.com/" >> ~/.npmrc
          cat ~/.npmrc

      - uses: qlik-oss/ci-tools/action-version@master

      # - uses: qlik-trial/qmfe-workflows/actions/publish-npm-integration-build@v1
      - name: Generate integration version value
        shell: bash
        run: |
          set -o pipefail

          echo "branch name: ${{ steps.comment-branch.outputs.head_ref }}";
          _sha=${_sha:=$SHA}
          git fetch --depth=10000

          # git-describe - Give an object a human readable name based on an available ref
          # On PR actions/checkout checkouts a merge commit instead of commit sha, git describe
          # returns merge commit. To avoid this unpredictable commit sha, we will describe
          # the actual commit
          git_rev=$(git describe --tags --always --abbrev=0 ${_sha} --match "v[0-9]*.[0-9]*.[0-9]*")

          echo "++++++++++++++++";
          git describe --tags --always
          git describe --tags --always --abbrev=7
          git describe --tags --always --abbrev=0 --match "v[0-9]*.[0-9]*.[0-9]*"
          echo "++++++++++++++++";

          echo "===============";
          echo $SHA;
          echo $git_rev;
          echo "===============";

          # If git revision is not an exact semver tag, then bump patch
          # An exact semver does not contain a '-'
          if [[ "$git_rev" == *-* ]]; then
            echo 1;
            # Transforms 0.0.0-0-g1234abc to 0.0.1-0.g123abc
            git_rev=$(echo $git_rev | perl -ne 'm/(^v\d+\.\d+\.)(\d+)(.*)(\-g)(.*$)/ && print $1 . int(1+$2) . $3 . ".g" . $5')
          fi

          # If no version is returned from git describe, generate one
          [ -z "$git_rev" ] && git_rev="v0.0.0-0.g${_sha:0:7}"

          # Return Version without v prefix
          VER=${git_rev#v}
          # On tag push that matches refs/tags/v*.*.*, use that version regardless of git describe
          if echo "$GITHUB_REF" | grep -E 'refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo 2;
            VER=${GITHUB_REF#*/v}
            RELEASE_TAG="1"
          fi

          echo "Set version: ${VER}"
          if (echo $VER | egrep -- '-[0-9a-z.]+$' 1> /dev/null); then
            echo 3;
            npm version $VER --no-git-tag-version
          fi

          cat package.json | grep version

      # - name: Publish
      #   run: |
      #     # make sure we have .d.ts files in our package
      #     DTS=`ls ./dist/** | grep d.ts | wc -l`
      #     echo "# of *.d.ts files is $DTS"
      #     if [[ $DTS -eq 0 ]]; then
      #       echo "Missing *.d.ts files"
      #       exit 1
      #     fi
      #     yarn publish ./dist --ignore-scripts

      # # outro
      # - name: Add version value to env
      #   run: |
      #     # After publishing, the version should be an integration version
      #     echo "version=$VERSION" >> $GITHUB_OUTPUT
      #   id: add-version

      # - name: Comment on the PR with the package version
      #   uses: actions-ecosystem/action-create-comment@v1
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     body: |
      #       :robot: Test Pkg is ready: `${{ steps.add-version.outputs.version }}`
